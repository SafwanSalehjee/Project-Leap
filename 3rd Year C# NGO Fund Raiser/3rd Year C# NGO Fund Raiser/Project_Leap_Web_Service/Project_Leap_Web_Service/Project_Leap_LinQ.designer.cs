#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project_Leap_Web_Service
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Project_Leap_DB")]
	public partial class Project_Leap_LinQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBadge(Badge instance);
    partial void UpdateBadge(Badge instance);
    partial void DeleteBadge(Badge instance);
    partial void InsertBusinessPoint(BusinessPoint instance);
    partial void UpdateBusinessPoint(BusinessPoint instance);
    partial void DeleteBusinessPoint(BusinessPoint instance);
    partial void InsertDonation(Donation instance);
    partial void UpdateDonation(Donation instance);
    partial void DeleteDonation(Donation instance);
    partial void InsertDonationRequest(DonationRequest instance);
    partial void UpdateDonationRequest(DonationRequest instance);
    partial void DeleteDonationRequest(DonationRequest instance);
    partial void InsertEquipmentDonation(EquipmentDonation instance);
    partial void UpdateEquipmentDonation(EquipmentDonation instance);
    partial void DeleteEquipmentDonation(EquipmentDonation instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventRSVP(EventRSVP instance);
    partial void UpdateEventRSVP(EventRSVP instance);
    partial void DeleteEventRSVP(EventRSVP instance);
    partial void InsertFundraisingCampaign(FundraisingCampaign instance);
    partial void UpdateFundraisingCampaign(FundraisingCampaign instance);
    partial void DeleteFundraisingCampaign(FundraisingCampaign instance);
    partial void InsertIndividual(Individual instance);
    partial void UpdateIndividual(Individual instance);
    partial void DeleteIndividual(Individual instance);
    partial void InsertManager(Manager instance);
    partial void UpdateManager(Manager instance);
    partial void DeleteManager(Manager instance);
    partial void InsertMoneyDonation(MoneyDonation instance);
    partial void UpdateMoneyDonation(MoneyDonation instance);
    partial void DeleteMoneyDonation(MoneyDonation instance);
    partial void InsertNewsFeed(NewsFeed instance);
    partial void UpdateNewsFeed(NewsFeed instance);
    partial void DeleteNewsFeed(NewsFeed instance);
    partial void InsertNPORating(NPORating instance);
    partial void UpdateNPORating(NPORating instance);
    partial void DeleteNPORating(NPORating instance);
    partial void InsertOrganisation(Organisation instance);
    partial void UpdateOrganisation(Organisation instance);
    partial void DeleteOrganisation(Organisation instance);
    partial void InsertSystemUser(SystemUser instance);
    partial void UpdateSystemUser(SystemUser instance);
    partial void DeleteSystemUser(SystemUser instance);
    partial void InsertTransactionPercentage(TransactionPercentage instance);
    partial void UpdateTransactionPercentage(TransactionPercentage instance);
    partial void DeleteTransactionPercentage(TransactionPercentage instance);
    partial void InsertVolunteerEvent(VolunteerEvent instance);
    partial void UpdateVolunteerEvent(VolunteerEvent instance);
    partial void DeleteVolunteerEvent(VolunteerEvent instance);
    partial void InsertUserBadge(UserBadge instance);
    partial void UpdateUserBadge(UserBadge instance);
    partial void DeleteUserBadge(UserBadge instance);
    #endregion
		
		public Project_Leap_LinQDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Project_Leap_DBConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Project_Leap_LinQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Project_Leap_LinQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Project_Leap_LinQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Project_Leap_LinQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Badge> Badges
		{
			get
			{
				return this.GetTable<Badge>();
			}
		}
		
		public System.Data.Linq.Table<BusinessPoint> BusinessPoints
		{
			get
			{
				return this.GetTable<BusinessPoint>();
			}
		}
		
		public System.Data.Linq.Table<Donation> Donations
		{
			get
			{
				return this.GetTable<Donation>();
			}
		}
		
		public System.Data.Linq.Table<DonationRequest> DonationRequests
		{
			get
			{
				return this.GetTable<DonationRequest>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentDonation> EquipmentDonations
		{
			get
			{
				return this.GetTable<EquipmentDonation>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventRSVP> EventRSVPs
		{
			get
			{
				return this.GetTable<EventRSVP>();
			}
		}
		
		public System.Data.Linq.Table<FundraisingCampaign> FundraisingCampaigns
		{
			get
			{
				return this.GetTable<FundraisingCampaign>();
			}
		}
		
		public System.Data.Linq.Table<Individual> Individuals
		{
			get
			{
				return this.GetTable<Individual>();
			}
		}
		
		public System.Data.Linq.Table<Manager> Managers
		{
			get
			{
				return this.GetTable<Manager>();
			}
		}
		
		public System.Data.Linq.Table<MoneyDonation> MoneyDonations
		{
			get
			{
				return this.GetTable<MoneyDonation>();
			}
		}
		
		public System.Data.Linq.Table<NewsFeed> NewsFeeds
		{
			get
			{
				return this.GetTable<NewsFeed>();
			}
		}
		
		public System.Data.Linq.Table<NPORating> NPORatings
		{
			get
			{
				return this.GetTable<NPORating>();
			}
		}
		
		public System.Data.Linq.Table<Organisation> Organisations
		{
			get
			{
				return this.GetTable<Organisation>();
			}
		}
		
		public System.Data.Linq.Table<SystemUser> SystemUsers
		{
			get
			{
				return this.GetTable<SystemUser>();
			}
		}
		
		public System.Data.Linq.Table<TransactionPercentage> TransactionPercentages
		{
			get
			{
				return this.GetTable<TransactionPercentage>();
			}
		}
		
		public System.Data.Linq.Table<VolunteerEvent> VolunteerEvents
		{
			get
			{
				return this.GetTable<VolunteerEvent>();
			}
		}
		
		public System.Data.Linq.Table<UserBadge> UserBadges
		{
			get
			{
				return this.GetTable<UserBadge>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Badge")]
	public partial class Badge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Condition;
		
		private System.Nullable<int> _Type;
		
		private EntitySet<UserBadge> _UserBadges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnConditionChanging(System.Nullable<int> value);
    partial void OnConditionChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public Badge()
		{
			this._UserBadges = new EntitySet<UserBadge>(new Action<UserBadge>(this.attach_UserBadges), new Action<UserBadge>(this.detach_UserBadges));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Condition", DbType="Int")]
		public System.Nullable<int> Condition
		{
			get
			{
				return this._Condition;
			}
			set
			{
				if ((this._Condition != value))
				{
					this.OnConditionChanging(value);
					this.SendPropertyChanging();
					this._Condition = value;
					this.SendPropertyChanged("Condition");
					this.OnConditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Badge_UserBadge", Storage="_UserBadges", ThisKey="Id", OtherKey="BadgeID")]
		public EntitySet<UserBadge> UserBadges
		{
			get
			{
				return this._UserBadges;
			}
			set
			{
				this._UserBadges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserBadges(UserBadge entity)
		{
			this.SendPropertyChanging();
			entity.Badge = this;
		}
		
		private void detach_UserBadges(UserBadge entity)
		{
			this.SendPropertyChanging();
			entity.Badge = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessPoint")]
	public partial class BusinessPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrganisationID;
		
		private System.Nullable<int> _Point;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrganisationIDChanging(int value);
    partial void OnOrganisationIDChanged();
    partial void OnPointChanging(System.Nullable<int> value);
    partial void OnPointChanged();
    #endregion
		
		public BusinessPoint()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point", DbType="Int")]
		public System.Nullable<int> Point
		{
			get
			{
				return this._Point;
			}
			set
			{
				if ((this._Point != value))
				{
					this.OnPointChanging(value);
					this.SendPropertyChanging();
					this._Point = value;
					this.SendPropertyChanged("Point");
					this.OnPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_BusinessPoint", Storage="_Organisation", ThisKey="OrganisationID", OtherKey="OrganisationID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.BusinessPoint = null;
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.BusinessPoint = this;
						this._OrganisationID = value.OrganisationID;
					}
					else
					{
						this._OrganisationID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Donation")]
	public partial class Donation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DonationID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _OrganisationID;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _DonationDate;
		
		private System.Nullable<int> _RequestIDNumber;
		
		private EntityRef<EquipmentDonation> _EquipmentDonation;
		
		private EntityRef<MoneyDonation> _MoneyDonation;
		
		private EntityRef<DonationRequest> _DonationRequest;
		
		private EntityRef<Organisation> _Organisation;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDonationIDChanging(int value);
    partial void OnDonationIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnOrganisationIDChanging(System.Nullable<int> value);
    partial void OnOrganisationIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDonationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDonationDateChanged();
    partial void OnRequestIDNumberChanging(System.Nullable<int> value);
    partial void OnRequestIDNumberChanged();
    #endregion
		
		public Donation()
		{
			this._EquipmentDonation = default(EntityRef<EquipmentDonation>);
			this._MoneyDonation = default(EntityRef<MoneyDonation>);
			this._DonationRequest = default(EntityRef<DonationRequest>);
			this._Organisation = default(EntityRef<Organisation>);
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DonationID
		{
			get
			{
				return this._DonationID;
			}
			set
			{
				if ((this._DonationID != value))
				{
					this.OnDonationIDChanging(value);
					this.SendPropertyChanging();
					this._DonationID = value;
					this.SendPropertyChanged("DonationID");
					this.OnDonationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", DbType="Int")]
		public System.Nullable<int> OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationDate", DbType="Date")]
		public System.Nullable<System.DateTime> DonationDate
		{
			get
			{
				return this._DonationDate;
			}
			set
			{
				if ((this._DonationDate != value))
				{
					this.OnDonationDateChanging(value);
					this.SendPropertyChanging();
					this._DonationDate = value;
					this.SendPropertyChanged("DonationDate");
					this.OnDonationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestIDNumber", DbType="Int")]
		public System.Nullable<int> RequestIDNumber
		{
			get
			{
				return this._RequestIDNumber;
			}
			set
			{
				if ((this._RequestIDNumber != value))
				{
					if (this._DonationRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIDNumberChanging(value);
					this.SendPropertyChanging();
					this._RequestIDNumber = value;
					this.SendPropertyChanged("RequestIDNumber");
					this.OnRequestIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Donation_EquipmentDonation", Storage="_EquipmentDonation", ThisKey="DonationID", OtherKey="DonationID", IsUnique=true, IsForeignKey=false)]
		public EquipmentDonation EquipmentDonation
		{
			get
			{
				return this._EquipmentDonation.Entity;
			}
			set
			{
				EquipmentDonation previousValue = this._EquipmentDonation.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentDonation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentDonation.Entity = null;
						previousValue.Donation = null;
					}
					this._EquipmentDonation.Entity = value;
					if ((value != null))
					{
						value.Donation = this;
					}
					this.SendPropertyChanged("EquipmentDonation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Donation_MoneyDonation", Storage="_MoneyDonation", ThisKey="DonationID", OtherKey="DonationID", IsUnique=true, IsForeignKey=false)]
		public MoneyDonation MoneyDonation
		{
			get
			{
				return this._MoneyDonation.Entity;
			}
			set
			{
				MoneyDonation previousValue = this._MoneyDonation.Entity;
				if (((previousValue != value) 
							|| (this._MoneyDonation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneyDonation.Entity = null;
						previousValue.Donation = null;
					}
					this._MoneyDonation.Entity = value;
					if ((value != null))
					{
						value.Donation = this;
					}
					this.SendPropertyChanged("MoneyDonation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonationRequest_Donation", Storage="_DonationRequest", ThisKey="RequestIDNumber", OtherKey="RequestIDNumber", IsForeignKey=true)]
		public DonationRequest DonationRequest
		{
			get
			{
				return this._DonationRequest.Entity;
			}
			set
			{
				DonationRequest previousValue = this._DonationRequest.Entity;
				if (((previousValue != value) 
							|| (this._DonationRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DonationRequest.Entity = null;
						previousValue.Donations.Remove(this);
					}
					this._DonationRequest.Entity = value;
					if ((value != null))
					{
						value.Donations.Add(this);
						this._RequestIDNumber = value.RequestIDNumber;
					}
					else
					{
						this._RequestIDNumber = default(Nullable<int>);
					}
					this.SendPropertyChanged("DonationRequest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Donation", Storage="_Organisation", ThisKey="OrganisationID", OtherKey="OrganisationID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Donations.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Donations.Add(this);
						this._OrganisationID = value.OrganisationID;
					}
					else
					{
						this._OrganisationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_Donation", Storage="_SystemUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.Donations.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.Donations.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DonationRequest")]
	public partial class DonationRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestIDNumber;
		
		private int _OrganisationID;
		
		private string _Description;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<System.DateTime> _DonationDate;
		
		private EntitySet<Donation> _Donations;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDNumberChanging(int value);
    partial void OnRequestIDNumberChanged();
    partial void OnOrganisationIDChanging(int value);
    partial void OnOrganisationIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnDonationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDonationDateChanged();
    #endregion
		
		public DonationRequest()
		{
			this._Donations = new EntitySet<Donation>(new Action<Donation>(this.attach_Donations), new Action<Donation>(this.detach_Donations));
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestIDNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestIDNumber
		{
			get
			{
				return this._RequestIDNumber;
			}
			set
			{
				if ((this._RequestIDNumber != value))
				{
					this.OnRequestIDNumberChanging(value);
					this.SendPropertyChanging();
					this._RequestIDNumber = value;
					this.SendPropertyChanged("RequestIDNumber");
					this.OnRequestIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", DbType="Int NOT NULL")]
		public int OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationDate", DbType="Date")]
		public System.Nullable<System.DateTime> DonationDate
		{
			get
			{
				return this._DonationDate;
			}
			set
			{
				if ((this._DonationDate != value))
				{
					this.OnDonationDateChanging(value);
					this.SendPropertyChanging();
					this._DonationDate = value;
					this.SendPropertyChanged("DonationDate");
					this.OnDonationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonationRequest_Donation", Storage="_Donations", ThisKey="RequestIDNumber", OtherKey="RequestIDNumber")]
		public EntitySet<Donation> Donations
		{
			get
			{
				return this._Donations;
			}
			set
			{
				this._Donations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_DonationRequest", Storage="_Organisation", ThisKey="OrganisationID", OtherKey="OrganisationID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.DonationRequests.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.DonationRequests.Add(this);
						this._OrganisationID = value.OrganisationID;
					}
					else
					{
						this._OrganisationID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Donations(Donation entity)
		{
			this.SendPropertyChanging();
			entity.DonationRequest = this;
		}
		
		private void detach_Donations(Donation entity)
		{
			this.SendPropertyChanging();
			entity.DonationRequest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentDonation")]
	public partial class EquipmentDonation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DonationID;
		
		private System.Nullable<int> _Quantity;
		
		private string _EquipmentName;
		
		private EntityRef<Donation> _Donation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDonationIDChanging(int value);
    partial void OnDonationIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnEquipmentNameChanging(string value);
    partial void OnEquipmentNameChanged();
    #endregion
		
		public EquipmentDonation()
		{
			this._Donation = default(EntityRef<Donation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DonationID
		{
			get
			{
				return this._DonationID;
			}
			set
			{
				if ((this._DonationID != value))
				{
					if (this._Donation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDonationIDChanging(value);
					this.SendPropertyChanging();
					this._DonationID = value;
					this.SendPropertyChanged("DonationID");
					this.OnDonationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentName", DbType="VarChar(100)")]
		public string EquipmentName
		{
			get
			{
				return this._EquipmentName;
			}
			set
			{
				if ((this._EquipmentName != value))
				{
					this.OnEquipmentNameChanging(value);
					this.SendPropertyChanging();
					this._EquipmentName = value;
					this.SendPropertyChanged("EquipmentName");
					this.OnEquipmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Donation_EquipmentDonation", Storage="_Donation", ThisKey="DonationID", OtherKey="DonationID", IsForeignKey=true)]
		public Donation Donation
		{
			get
			{
				return this._Donation.Entity;
			}
			set
			{
				Donation previousValue = this._Donation.Entity;
				if (((previousValue != value) 
							|| (this._Donation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Donation.Entity = null;
						previousValue.EquipmentDonation = null;
					}
					this._Donation.Entity = value;
					if ((value != null))
					{
						value.EquipmentDonation = this;
						this._DonationID = value.DonationID;
					}
					else
					{
						this._DonationID = default(int);
					}
					this.SendPropertyChanged("Donation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _OrganisationID;
		
		private string _Name;
		
		private string _Location;
		
		private System.Nullable<System.DateTime> _DateOfEvent;
		
		private string _Host;
		
		private string _Description;
		
		private string _TimeOfEvent;
		
		private EntitySet<EventRSVP> _EventRSVPs;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnOrganisationIDChanging(int value);
    partial void OnOrganisationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnDateOfEventChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEventChanged();
    partial void OnHostChanging(string value);
    partial void OnHostChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeOfEventChanging(string value);
    partial void OnTimeOfEventChanged();
    #endregion
		
		public Event()
		{
			this._EventRSVPs = new EntitySet<EventRSVP>(new Action<EventRSVP>(this.attach_EventRSVPs), new Action<EventRSVP>(this.detach_EventRSVPs));
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", DbType="Int NOT NULL")]
		public int OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(100)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEvent", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfEvent
		{
			get
			{
				return this._DateOfEvent;
			}
			set
			{
				if ((this._DateOfEvent != value))
				{
					this.OnDateOfEventChanging(value);
					this.SendPropertyChanging();
					this._DateOfEvent = value;
					this.SendPropertyChanged("DateOfEvent");
					this.OnDateOfEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Host", DbType="VarChar(100)")]
		public string Host
		{
			get
			{
				return this._Host;
			}
			set
			{
				if ((this._Host != value))
				{
					this.OnHostChanging(value);
					this.SendPropertyChanging();
					this._Host = value;
					this.SendPropertyChanged("Host");
					this.OnHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOfEvent", DbType="VarChar(50)")]
		public string TimeOfEvent
		{
			get
			{
				return this._TimeOfEvent;
			}
			set
			{
				if ((this._TimeOfEvent != value))
				{
					this.OnTimeOfEventChanging(value);
					this.SendPropertyChanging();
					this._TimeOfEvent = value;
					this.SendPropertyChanged("TimeOfEvent");
					this.OnTimeOfEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventRSVP", Storage="_EventRSVPs", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<EventRSVP> EventRSVPs
		{
			get
			{
				return this._EventRSVPs;
			}
			set
			{
				this._EventRSVPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Event", Storage="_Organisation", ThisKey="OrganisationID", OtherKey="OrganisationID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._OrganisationID = value.OrganisationID;
					}
					else
					{
						this._OrganisationID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventRSVPs(EventRSVP entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventRSVPs(EventRSVP entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventRSVP")]
	public partial class EventRSVP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RSVPID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _EventID;
		
		private string _Attendence;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRSVPIDChanging(int value);
    partial void OnRSVPIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnEventIDChanging(System.Nullable<int> value);
    partial void OnEventIDChanged();
    partial void OnAttendenceChanging(string value);
    partial void OnAttendenceChanged();
    #endregion
		
		public EventRSVP()
		{
			this._Event = default(EntityRef<Event>);
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSVPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RSVPID
		{
			get
			{
				return this._RSVPID;
			}
			set
			{
				if ((this._RSVPID != value))
				{
					this.OnRSVPIDChanging(value);
					this.SendPropertyChanging();
					this._RSVPID = value;
					this.SendPropertyChanged("RSVPID");
					this.OnRSVPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int")]
		public System.Nullable<int> EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attendence", DbType="VarChar(100)")]
		public string Attendence
		{
			get
			{
				return this._Attendence;
			}
			set
			{
				if ((this._Attendence != value))
				{
					this.OnAttendenceChanging(value);
					this.SendPropertyChanging();
					this._Attendence = value;
					this.SendPropertyChanged("Attendence");
					this.OnAttendenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventRSVP", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventRSVPs.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventRSVPs.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_EventRSVP", Storage="_SystemUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.EventRSVPs.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.EventRSVPs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FundraisingCampaign")]
	public partial class FundraisingCampaign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FundraisingCampaignID;
		
		private int _OrganisationID;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<decimal> _CurrentAmount;
		
		private System.Nullable<decimal> _TotalAmount;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFundraisingCampaignIDChanging(int value);
    partial void OnFundraisingCampaignIDChanged();
    partial void OnOrganisationIDChanging(int value);
    partial void OnOrganisationIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCurrentAmountChanging(System.Nullable<decimal> value);
    partial void OnCurrentAmountChanged();
    partial void OnTotalAmountChanging(System.Nullable<decimal> value);
    partial void OnTotalAmountChanged();
    #endregion
		
		public FundraisingCampaign()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundraisingCampaignID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FundraisingCampaignID
		{
			get
			{
				return this._FundraisingCampaignID;
			}
			set
			{
				if ((this._FundraisingCampaignID != value))
				{
					this.OnFundraisingCampaignIDChanging(value);
					this.SendPropertyChanging();
					this._FundraisingCampaignID = value;
					this.SendPropertyChanged("FundraisingCampaignID");
					this.OnFundraisingCampaignIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", DbType="Int NOT NULL")]
		public int OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CurrentAmount
		{
			get
			{
				return this._CurrentAmount;
			}
			set
			{
				if ((this._CurrentAmount != value))
				{
					this.OnCurrentAmountChanging(value);
					this.SendPropertyChanging();
					this._CurrentAmount = value;
					this.SendPropertyChanged("CurrentAmount");
					this.OnCurrentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_FundraisingCampaign", Storage="_Organisation", ThisKey="OrganisationID", OtherKey="OrganisationID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.FundraisingCampaigns.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.FundraisingCampaigns.Add(this);
						this._OrganisationID = value.OrganisationID;
					}
					else
					{
						this._OrganisationID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Individual")]
	public partial class Individual : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private System.Nullable<int> _Point;
		
		private EntitySet<VolunteerEvent> _VolunteerEvents;
		
		private EntitySet<UserBadge> _UserBadges;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPointChanging(System.Nullable<int> value);
    partial void OnPointChanged();
    #endregion
		
		public Individual()
		{
			this._VolunteerEvents = new EntitySet<VolunteerEvent>(new Action<VolunteerEvent>(this.attach_VolunteerEvents), new Action<VolunteerEvent>(this.detach_VolunteerEvents));
			this._UserBadges = new EntitySet<UserBadge>(new Action<UserBadge>(this.attach_UserBadges), new Action<UserBadge>(this.detach_UserBadges));
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point", DbType="Int")]
		public System.Nullable<int> Point
		{
			get
			{
				return this._Point;
			}
			set
			{
				if ((this._Point != value))
				{
					this.OnPointChanging(value);
					this.SendPropertyChanging();
					this._Point = value;
					this.SendPropertyChanged("Point");
					this.OnPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Individual_VolunteerEvent", Storage="_VolunteerEvents", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<VolunteerEvent> VolunteerEvents
		{
			get
			{
				return this._VolunteerEvents;
			}
			set
			{
				this._VolunteerEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Individual_UserBadge", Storage="_UserBadges", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserBadge> UserBadges
		{
			get
			{
				return this._UserBadges;
			}
			set
			{
				this._UserBadges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_Individual", Storage="_SystemUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.Individual = null;
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.Individual = this;
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VolunteerEvents(VolunteerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Individual = this;
		}
		
		private void detach_VolunteerEvents(VolunteerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Individual = null;
		}
		
		private void attach_UserBadges(UserBadge entity)
		{
			this.SendPropertyChanging();
			entity.Individual = this;
		}
		
		private void detach_UserBadges(UserBadge entity)
		{
			this.SendPropertyChanging();
			entity.Individual = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Manager")]
	public partial class Manager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _OrganisationID;
		
		private EntityRef<Organisation> _Organisation;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnOrganisationIDChanging(int value);
    partial void OnOrganisationIDChanged();
    #endregion
		
		public Manager()
		{
			this._Organisation = default(EntityRef<Organisation>);
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", DbType="Int NOT NULL")]
		public int OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Manager", Storage="_Organisation", ThisKey="OrganisationID", OtherKey="OrganisationID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Managers.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Managers.Add(this);
						this._OrganisationID = value.OrganisationID;
					}
					else
					{
						this._OrganisationID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_Manager", Storage="_SystemUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.Managers.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.Managers.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoneyDonation")]
	public partial class MoneyDonation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DonationID;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<decimal> _TransactionPercentage;
		
		private System.Nullable<decimal> _TransactionAmount;
		
		private EntityRef<Donation> _Donation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDonationIDChanging(int value);
    partial void OnDonationIDChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnTransactionPercentageChanging(System.Nullable<decimal> value);
    partial void OnTransactionPercentageChanged();
    partial void OnTransactionAmountChanging(System.Nullable<decimal> value);
    partial void OnTransactionAmountChanged();
    #endregion
		
		public MoneyDonation()
		{
			this._Donation = default(EntityRef<Donation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DonationID
		{
			get
			{
				return this._DonationID;
			}
			set
			{
				if ((this._DonationID != value))
				{
					if (this._Donation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDonationIDChanging(value);
					this.SendPropertyChanging();
					this._DonationID = value;
					this.SendPropertyChanged("DonationID");
					this.OnDonationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionPercentage", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TransactionPercentage
		{
			get
			{
				return this._TransactionPercentage;
			}
			set
			{
				if ((this._TransactionPercentage != value))
				{
					this.OnTransactionPercentageChanging(value);
					this.SendPropertyChanging();
					this._TransactionPercentage = value;
					this.SendPropertyChanged("TransactionPercentage");
					this.OnTransactionPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TransactionAmount
		{
			get
			{
				return this._TransactionAmount;
			}
			set
			{
				if ((this._TransactionAmount != value))
				{
					this.OnTransactionAmountChanging(value);
					this.SendPropertyChanging();
					this._TransactionAmount = value;
					this.SendPropertyChanged("TransactionAmount");
					this.OnTransactionAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Donation_MoneyDonation", Storage="_Donation", ThisKey="DonationID", OtherKey="DonationID", IsForeignKey=true)]
		public Donation Donation
		{
			get
			{
				return this._Donation.Entity;
			}
			set
			{
				Donation previousValue = this._Donation.Entity;
				if (((previousValue != value) 
							|| (this._Donation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Donation.Entity = null;
						previousValue.MoneyDonation = null;
					}
					this._Donation.Entity = value;
					if ((value != null))
					{
						value.MoneyDonation = this;
						this._DonationID = value.DonationID;
					}
					else
					{
						this._DonationID = default(int);
					}
					this.SendPropertyChanged("Donation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsFeed")]
	public partial class NewsFeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsFeedID;
		
		private int _OrganisationID;
		
		private string _Title;
		
		private string _Body;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsFeedIDChanging(int value);
    partial void OnNewsFeedIDChanged();
    partial void OnOrganisationIDChanging(int value);
    partial void OnOrganisationIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion
		
		public NewsFeed()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsFeedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsFeedID
		{
			get
			{
				return this._NewsFeedID;
			}
			set
			{
				if ((this._NewsFeedID != value))
				{
					this.OnNewsFeedIDChanging(value);
					this.SendPropertyChanging();
					this._NewsFeedID = value;
					this.SendPropertyChanged("NewsFeedID");
					this.OnNewsFeedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", DbType="Int NOT NULL")]
		public int OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="VarChar(1000)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_NewsFeed", Storage="_Organisation", ThisKey="OrganisationID", OtherKey="OrganisationID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.NewsFeeds.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.NewsFeeds.Add(this);
						this._OrganisationID = value.OrganisationID;
					}
					else
					{
						this._OrganisationID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NPORating")]
	public partial class NPORating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RatindID;
		
		private int _UserID;
		
		private int _OrganisationID;
		
		private System.Nullable<int> _Rating;
		
		private EntityRef<Organisation> _Organisation;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRatindIDChanging(int value);
    partial void OnRatindIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnOrganisationIDChanging(int value);
    partial void OnOrganisationIDChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    #endregion
		
		public NPORating()
		{
			this._Organisation = default(EntityRef<Organisation>);
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatindID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RatindID
		{
			get
			{
				return this._RatindID;
			}
			set
			{
				if ((this._RatindID != value))
				{
					this.OnRatindIDChanging(value);
					this.SendPropertyChanging();
					this._RatindID = value;
					this.SendPropertyChanged("RatindID");
					this.OnRatindIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", DbType="Int NOT NULL")]
		public int OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int")]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_NPORating", Storage="_Organisation", ThisKey="OrganisationID", OtherKey="OrganisationID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.NPORatings.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.NPORatings.Add(this);
						this._OrganisationID = value.OrganisationID;
					}
					else
					{
						this._OrganisationID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_NPORating", Storage="_SystemUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.NPORatings.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.NPORatings.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organisation")]
	public partial class Organisation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrganisationID;
		
		private System.Nullable<int> _OrganisationNumber;
		
		private string _OrganisationName;
		
		private System.Nullable<int> _OrganisationType;
		
		private string _Street;
		
		private string _Suburb;
		
		private string _Province;
		
		private string _Country;
		
		private string _Continent;
		
		private string _ContactNumber;
		
		private string _Industry;
		
		private System.Nullable<System.DateTime> _RegistrationDate;
		
		private System.Nullable<bool> _Verified;
		
		private string _FilePath;
		
		private string _LogoURL;
		
		private System.Nullable<bool> _Banned;
		
		private EntityRef<BusinessPoint> _BusinessPoint;
		
		private EntitySet<Donation> _Donations;
		
		private EntitySet<DonationRequest> _DonationRequests;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<FundraisingCampaign> _FundraisingCampaigns;
		
		private EntitySet<Manager> _Managers;
		
		private EntitySet<NewsFeed> _NewsFeeds;
		
		private EntitySet<NPORating> _NPORatings;
		
		private EntitySet<VolunteerEvent> _VolunteerEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrganisationIDChanging(int value);
    partial void OnOrganisationIDChanged();
    partial void OnOrganisationNumberChanging(System.Nullable<int> value);
    partial void OnOrganisationNumberChanged();
    partial void OnOrganisationNameChanging(string value);
    partial void OnOrganisationNameChanged();
    partial void OnOrganisationTypeChanging(System.Nullable<int> value);
    partial void OnOrganisationTypeChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnSuburbChanging(string value);
    partial void OnSuburbChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnContinentChanging(string value);
    partial void OnContinentChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnIndustryChanging(string value);
    partial void OnIndustryChanged();
    partial void OnRegistrationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegistrationDateChanged();
    partial void OnVerifiedChanging(System.Nullable<bool> value);
    partial void OnVerifiedChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnLogoURLChanging(string value);
    partial void OnLogoURLChanged();
    partial void OnBannedChanging(System.Nullable<bool> value);
    partial void OnBannedChanged();
    #endregion
		
		public Organisation()
		{
			this._BusinessPoint = default(EntityRef<BusinessPoint>);
			this._Donations = new EntitySet<Donation>(new Action<Donation>(this.attach_Donations), new Action<Donation>(this.detach_Donations));
			this._DonationRequests = new EntitySet<DonationRequest>(new Action<DonationRequest>(this.attach_DonationRequests), new Action<DonationRequest>(this.detach_DonationRequests));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._FundraisingCampaigns = new EntitySet<FundraisingCampaign>(new Action<FundraisingCampaign>(this.attach_FundraisingCampaigns), new Action<FundraisingCampaign>(this.detach_FundraisingCampaigns));
			this._Managers = new EntitySet<Manager>(new Action<Manager>(this.attach_Managers), new Action<Manager>(this.detach_Managers));
			this._NewsFeeds = new EntitySet<NewsFeed>(new Action<NewsFeed>(this.attach_NewsFeeds), new Action<NewsFeed>(this.detach_NewsFeeds));
			this._NPORatings = new EntitySet<NPORating>(new Action<NPORating>(this.attach_NPORatings), new Action<NPORating>(this.detach_NPORatings));
			this._VolunteerEvents = new EntitySet<VolunteerEvent>(new Action<VolunteerEvent>(this.attach_VolunteerEvents), new Action<VolunteerEvent>(this.detach_VolunteerEvents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationNumber", DbType="Int")]
		public System.Nullable<int> OrganisationNumber
		{
			get
			{
				return this._OrganisationNumber;
			}
			set
			{
				if ((this._OrganisationNumber != value))
				{
					this.OnOrganisationNumberChanging(value);
					this.SendPropertyChanging();
					this._OrganisationNumber = value;
					this.SendPropertyChanged("OrganisationNumber");
					this.OnOrganisationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationName", DbType="VarChar(100)")]
		public string OrganisationName
		{
			get
			{
				return this._OrganisationName;
			}
			set
			{
				if ((this._OrganisationName != value))
				{
					this.OnOrganisationNameChanging(value);
					this.SendPropertyChanging();
					this._OrganisationName = value;
					this.SendPropertyChanged("OrganisationName");
					this.OnOrganisationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationType", DbType="Int")]
		public System.Nullable<int> OrganisationType
		{
			get
			{
				return this._OrganisationType;
			}
			set
			{
				if ((this._OrganisationType != value))
				{
					this.OnOrganisationTypeChanging(value);
					this.SendPropertyChanging();
					this._OrganisationType = value;
					this.SendPropertyChanged("OrganisationType");
					this.OnOrganisationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="VarChar(100)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suburb", DbType="VarChar(100)")]
		public string Suburb
		{
			get
			{
				return this._Suburb;
			}
			set
			{
				if ((this._Suburb != value))
				{
					this.OnSuburbChanging(value);
					this.SendPropertyChanging();
					this._Suburb = value;
					this.SendPropertyChanged("Suburb");
					this.OnSuburbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="VarChar(100)")]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Continent", DbType="VarChar(100)")]
		public string Continent
		{
			get
			{
				return this._Continent;
			}
			set
			{
				if ((this._Continent != value))
				{
					this.OnContinentChanging(value);
					this.SendPropertyChanging();
					this._Continent = value;
					this.SendPropertyChanged("Continent");
					this.OnContinentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(100)")]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Industry", DbType="VarChar(100)")]
		public string Industry
		{
			get
			{
				return this._Industry;
			}
			set
			{
				if ((this._Industry != value))
				{
					this.OnIndustryChanging(value);
					this.SendPropertyChanging();
					this._Industry = value;
					this.SendPropertyChanged("Industry");
					this.OnIndustryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="Date")]
		public System.Nullable<System.DateTime> RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verified", DbType="Bit")]
		public System.Nullable<bool> Verified
		{
			get
			{
				return this._Verified;
			}
			set
			{
				if ((this._Verified != value))
				{
					this.OnVerifiedChanging(value);
					this.SendPropertyChanging();
					this._Verified = value;
					this.SendPropertyChanged("Verified");
					this.OnVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="VarChar(1000)")]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoURL", DbType="VarChar(1000)")]
		public string LogoURL
		{
			get
			{
				return this._LogoURL;
			}
			set
			{
				if ((this._LogoURL != value))
				{
					this.OnLogoURLChanging(value);
					this.SendPropertyChanging();
					this._LogoURL = value;
					this.SendPropertyChanged("LogoURL");
					this.OnLogoURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Banned", DbType="Bit")]
		public System.Nullable<bool> Banned
		{
			get
			{
				return this._Banned;
			}
			set
			{
				if ((this._Banned != value))
				{
					this.OnBannedChanging(value);
					this.SendPropertyChanging();
					this._Banned = value;
					this.SendPropertyChanged("Banned");
					this.OnBannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_BusinessPoint", Storage="_BusinessPoint", ThisKey="OrganisationID", OtherKey="OrganisationID", IsUnique=true, IsForeignKey=false)]
		public BusinessPoint BusinessPoint
		{
			get
			{
				return this._BusinessPoint.Entity;
			}
			set
			{
				BusinessPoint previousValue = this._BusinessPoint.Entity;
				if (((previousValue != value) 
							|| (this._BusinessPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessPoint.Entity = null;
						previousValue.Organisation = null;
					}
					this._BusinessPoint.Entity = value;
					if ((value != null))
					{
						value.Organisation = this;
					}
					this.SendPropertyChanged("BusinessPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Donation", Storage="_Donations", ThisKey="OrganisationID", OtherKey="OrganisationID")]
		public EntitySet<Donation> Donations
		{
			get
			{
				return this._Donations;
			}
			set
			{
				this._Donations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_DonationRequest", Storage="_DonationRequests", ThisKey="OrganisationID", OtherKey="OrganisationID")]
		public EntitySet<DonationRequest> DonationRequests
		{
			get
			{
				return this._DonationRequests;
			}
			set
			{
				this._DonationRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Event", Storage="_Events", ThisKey="OrganisationID", OtherKey="OrganisationID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_FundraisingCampaign", Storage="_FundraisingCampaigns", ThisKey="OrganisationID", OtherKey="OrganisationID")]
		public EntitySet<FundraisingCampaign> FundraisingCampaigns
		{
			get
			{
				return this._FundraisingCampaigns;
			}
			set
			{
				this._FundraisingCampaigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Manager", Storage="_Managers", ThisKey="OrganisationID", OtherKey="OrganisationID")]
		public EntitySet<Manager> Managers
		{
			get
			{
				return this._Managers;
			}
			set
			{
				this._Managers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_NewsFeed", Storage="_NewsFeeds", ThisKey="OrganisationID", OtherKey="OrganisationID")]
		public EntitySet<NewsFeed> NewsFeeds
		{
			get
			{
				return this._NewsFeeds;
			}
			set
			{
				this._NewsFeeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_NPORating", Storage="_NPORatings", ThisKey="OrganisationID", OtherKey="OrganisationID")]
		public EntitySet<NPORating> NPORatings
		{
			get
			{
				return this._NPORatings;
			}
			set
			{
				this._NPORatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_VolunteerEvent", Storage="_VolunteerEvents", ThisKey="OrganisationID", OtherKey="OrganisationID")]
		public EntitySet<VolunteerEvent> VolunteerEvents
		{
			get
			{
				return this._VolunteerEvents;
			}
			set
			{
				this._VolunteerEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Donations(Donation entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Donations(Donation entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_DonationRequests(DonationRequest entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_DonationRequests(DonationRequest entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_FundraisingCampaigns(FundraisingCampaign entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_FundraisingCampaigns(FundraisingCampaign entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Managers(Manager entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Managers(Manager entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_NewsFeeds(NewsFeed entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_NewsFeeds(NewsFeed entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_NPORatings(NPORating entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_NPORatings(NPORating entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_VolunteerEvents(VolunteerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_VolunteerEvents(VolunteerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemUser")]
	public partial class SystemUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<char> _Gender;
		
		private string _Title;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _Province;
		
		private string _Country;
		
		private string _Continent;
		
		private System.Nullable<int> _AccessLevel;
		
		private System.Nullable<System.DateTime> _RegistrationDate;
		
		private string _ProfilePictureURL;
		
		private System.Nullable<bool> _Banned;
		
		private EntitySet<Donation> _Donations;
		
		private EntitySet<EventRSVP> _EventRSVPs;
		
		private EntityRef<Individual> _Individual;
		
		private EntitySet<Manager> _Managers;
		
		private EntitySet<NPORating> _NPORatings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(System.Nullable<char> value);
    partial void OnGenderChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnContinentChanging(string value);
    partial void OnContinentChanged();
    partial void OnAccessLevelChanging(System.Nullable<int> value);
    partial void OnAccessLevelChanged();
    partial void OnRegistrationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegistrationDateChanged();
    partial void OnProfilePictureURLChanging(string value);
    partial void OnProfilePictureURLChanged();
    partial void OnBannedChanging(System.Nullable<bool> value);
    partial void OnBannedChanged();
    #endregion
		
		public SystemUser()
		{
			this._Donations = new EntitySet<Donation>(new Action<Donation>(this.attach_Donations), new Action<Donation>(this.detach_Donations));
			this._EventRSVPs = new EntitySet<EventRSVP>(new Action<EventRSVP>(this.attach_EventRSVPs), new Action<EventRSVP>(this.detach_EventRSVPs));
			this._Individual = default(EntityRef<Individual>);
			this._Managers = new EntitySet<Manager>(new Action<Manager>(this.attach_Managers), new Action<Manager>(this.detach_Managers));
			this._NPORatings = new EntitySet<NPORating>(new Action<NPORating>(this.attach_NPORatings), new Action<NPORating>(this.detach_NPORatings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1)")]
		public System.Nullable<char> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(10)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(1000)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="VarChar(100)")]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Continent", DbType="VarChar(100)")]
		public string Continent
		{
			get
			{
				return this._Continent;
			}
			set
			{
				if ((this._Continent != value))
				{
					this.OnContinentChanging(value);
					this.SendPropertyChanging();
					this._Continent = value;
					this.SendPropertyChanged("Continent");
					this.OnContinentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int")]
		public System.Nullable<int> AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="Date")]
		public System.Nullable<System.DateTime> RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilePictureURL", DbType="VarChar(2000)")]
		public string ProfilePictureURL
		{
			get
			{
				return this._ProfilePictureURL;
			}
			set
			{
				if ((this._ProfilePictureURL != value))
				{
					this.OnProfilePictureURLChanging(value);
					this.SendPropertyChanging();
					this._ProfilePictureURL = value;
					this.SendPropertyChanged("ProfilePictureURL");
					this.OnProfilePictureURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Banned", DbType="Bit")]
		public System.Nullable<bool> Banned
		{
			get
			{
				return this._Banned;
			}
			set
			{
				if ((this._Banned != value))
				{
					this.OnBannedChanging(value);
					this.SendPropertyChanging();
					this._Banned = value;
					this.SendPropertyChanged("Banned");
					this.OnBannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_Donation", Storage="_Donations", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Donation> Donations
		{
			get
			{
				return this._Donations;
			}
			set
			{
				this._Donations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_EventRSVP", Storage="_EventRSVPs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<EventRSVP> EventRSVPs
		{
			get
			{
				return this._EventRSVPs;
			}
			set
			{
				this._EventRSVPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_Individual", Storage="_Individual", ThisKey="UserID", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
		public Individual Individual
		{
			get
			{
				return this._Individual.Entity;
			}
			set
			{
				Individual previousValue = this._Individual.Entity;
				if (((previousValue != value) 
							|| (this._Individual.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Individual.Entity = null;
						previousValue.SystemUser = null;
					}
					this._Individual.Entity = value;
					if ((value != null))
					{
						value.SystemUser = this;
					}
					this.SendPropertyChanged("Individual");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_Manager", Storage="_Managers", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Manager> Managers
		{
			get
			{
				return this._Managers;
			}
			set
			{
				this._Managers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_NPORating", Storage="_NPORatings", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<NPORating> NPORatings
		{
			get
			{
				return this._NPORatings;
			}
			set
			{
				this._NPORatings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Donations(Donation entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_Donations(Donation entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
		
		private void attach_EventRSVPs(EventRSVP entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_EventRSVPs(EventRSVP entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
		
		private void attach_Managers(Manager entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_Managers(Manager entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
		
		private void attach_NPORatings(NPORating entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_NPORatings(NPORating entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionPercentage")]
	public partial class TransactionPercentage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionID;
		
		private System.Nullable<int> _Percentage;
		
		private System.Nullable<int> _AmountBracket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnPercentageChanging(System.Nullable<int> value);
    partial void OnPercentageChanged();
    partial void OnAmountBracketChanging(System.Nullable<int> value);
    partial void OnAmountBracketChanged();
    #endregion
		
		public TransactionPercentage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Int")]
		public System.Nullable<int> Percentage
		{
			get
			{
				return this._Percentage;
			}
			set
			{
				if ((this._Percentage != value))
				{
					this.OnPercentageChanging(value);
					this.SendPropertyChanging();
					this._Percentage = value;
					this.SendPropertyChanged("Percentage");
					this.OnPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountBracket", DbType="Int")]
		public System.Nullable<int> AmountBracket
		{
			get
			{
				return this._AmountBracket;
			}
			set
			{
				if ((this._AmountBracket != value))
				{
					this.OnAmountBracketChanging(value);
					this.SendPropertyChanging();
					this._AmountBracket = value;
					this.SendPropertyChanged("AmountBracket");
					this.OnAmountBracketChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VolunteerEvent")]
	public partial class VolunteerEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VolunteerID;
		
		private int _UserID;
		
		private int _OrganisationID;
		
		private System.Nullable<System.DateTime> _VolunteerDate;
		
		private System.Nullable<int> _HoursVolunteered;
		
		private string _Comment;
		
		private EntityRef<Organisation> _Organisation;
		
		private EntityRef<Individual> _Individual;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVolunteerIDChanging(int value);
    partial void OnVolunteerIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnOrganisationIDChanging(int value);
    partial void OnOrganisationIDChanged();
    partial void OnVolunteerDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVolunteerDateChanged();
    partial void OnHoursVolunteeredChanging(System.Nullable<int> value);
    partial void OnHoursVolunteeredChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public VolunteerEvent()
		{
			this._Organisation = default(EntityRef<Organisation>);
			this._Individual = default(EntityRef<Individual>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VolunteerID
		{
			get
			{
				return this._VolunteerID;
			}
			set
			{
				if ((this._VolunteerID != value))
				{
					this.OnVolunteerIDChanging(value);
					this.SendPropertyChanging();
					this._VolunteerID = value;
					this.SendPropertyChanged("VolunteerID");
					this.OnVolunteerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Individual.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationID", DbType="Int NOT NULL")]
		public int OrganisationID
		{
			get
			{
				return this._OrganisationID;
			}
			set
			{
				if ((this._OrganisationID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationID = value;
					this.SendPropertyChanged("OrganisationID");
					this.OnOrganisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteerDate", DbType="Date")]
		public System.Nullable<System.DateTime> VolunteerDate
		{
			get
			{
				return this._VolunteerDate;
			}
			set
			{
				if ((this._VolunteerDate != value))
				{
					this.OnVolunteerDateChanging(value);
					this.SendPropertyChanging();
					this._VolunteerDate = value;
					this.SendPropertyChanged("VolunteerDate");
					this.OnVolunteerDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoursVolunteered", DbType="Int")]
		public System.Nullable<int> HoursVolunteered
		{
			get
			{
				return this._HoursVolunteered;
			}
			set
			{
				if ((this._HoursVolunteered != value))
				{
					this.OnHoursVolunteeredChanging(value);
					this.SendPropertyChanging();
					this._HoursVolunteered = value;
					this.SendPropertyChanged("HoursVolunteered");
					this.OnHoursVolunteeredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_VolunteerEvent", Storage="_Organisation", ThisKey="OrganisationID", OtherKey="OrganisationID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.VolunteerEvents.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.VolunteerEvents.Add(this);
						this._OrganisationID = value.OrganisationID;
					}
					else
					{
						this._OrganisationID = default(int);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Individual_VolunteerEvent", Storage="_Individual", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Individual Individual
		{
			get
			{
				return this._Individual.Entity;
			}
			set
			{
				Individual previousValue = this._Individual.Entity;
				if (((previousValue != value) 
							|| (this._Individual.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Individual.Entity = null;
						previousValue.VolunteerEvents.Remove(this);
					}
					this._Individual.Entity = value;
					if ((value != null))
					{
						value.VolunteerEvents.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Individual");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserBadge")]
	public partial class UserBadge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BadgeID;
		
		private int _UserID;
		
		private EntityRef<Badge> _Badge;
		
		private EntityRef<Individual> _Individual;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBadgeIDChanging(int value);
    partial void OnBadgeIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserBadge()
		{
			this._Badge = default(EntityRef<Badge>);
			this._Individual = default(EntityRef<Individual>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BadgeID", DbType="Int NOT NULL")]
		public int BadgeID
		{
			get
			{
				return this._BadgeID;
			}
			set
			{
				if ((this._BadgeID != value))
				{
					if (this._Badge.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBadgeIDChanging(value);
					this.SendPropertyChanging();
					this._BadgeID = value;
					this.SendPropertyChanged("BadgeID");
					this.OnBadgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Individual.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Badge_UserBadge", Storage="_Badge", ThisKey="BadgeID", OtherKey="Id", IsForeignKey=true)]
		public Badge Badge
		{
			get
			{
				return this._Badge.Entity;
			}
			set
			{
				Badge previousValue = this._Badge.Entity;
				if (((previousValue != value) 
							|| (this._Badge.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Badge.Entity = null;
						previousValue.UserBadges.Remove(this);
					}
					this._Badge.Entity = value;
					if ((value != null))
					{
						value.UserBadges.Add(this);
						this._BadgeID = value.Id;
					}
					else
					{
						this._BadgeID = default(int);
					}
					this.SendPropertyChanged("Badge");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Individual_UserBadge", Storage="_Individual", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Individual Individual
		{
			get
			{
				return this._Individual.Entity;
			}
			set
			{
				Individual previousValue = this._Individual.Entity;
				if (((previousValue != value) 
							|| (this._Individual.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Individual.Entity = null;
						previousValue.UserBadges.Remove(this);
					}
					this._Individual.Entity = value;
					if ((value != null))
					{
						value.UserBadges.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Individual");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
